// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: proxy.proto

package proxygrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proxy_proto protoreflect.FileDescriptor

var file_proxy_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x1a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xaa, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2e, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x75, 0x62, 0x61, 0x6e, 0x6f, 0x76, 0x61, 0x42, 0x0e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x0b, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proxy_proto_goTypes = []interface{}{
	(*GetInfoRequest)(nil),       // 0: messanger.GetInfoRequest
	(*JoinChannelRequest)(nil),   // 1: messanger.JoinChannelRequest
	(*StartChannelRequest)(nil),  // 2: messanger.StartChannelRequest
	(*Chat)(nil),                 // 3: messanger.Chat
	(*GetInfoResponce)(nil),      // 4: messanger.GetInfoResponce
	(*ChannelMessage)(nil),       // 5: messanger.ChannelMessage
	(*StartChannelResponce)(nil), // 6: messanger.StartChannelResponce
}
var file_proxy_proto_depIdxs = []int32{
	0, // 0: proxy.MessangerProxy.GetInfo:input_type -> messanger.GetInfoRequest
	1, // 1: proxy.MessangerProxy.JoinChannel:input_type -> messanger.JoinChannelRequest
	2, // 2: proxy.MessangerProxy.StartChannel:input_type -> messanger.StartChannelRequest
	3, // 3: proxy.MessangerProxy.JoinChat:input_type -> messanger.Chat
	4, // 4: proxy.MessangerProxy.GetInfo:output_type -> messanger.GetInfoResponce
	5, // 5: proxy.MessangerProxy.JoinChannel:output_type -> messanger.ChannelMessage
	6, // 6: proxy.MessangerProxy.StartChannel:output_type -> messanger.StartChannelResponce
	3, // 7: proxy.MessangerProxy.JoinChat:output_type -> messanger.Chat
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proxy_proto_init() }
func file_proxy_proto_init() {
	if File_proxy_proto != nil {
		return
	}
	file_chat_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proxy_proto_goTypes,
		DependencyIndexes: file_proxy_proto_depIdxs,
	}.Build()
	File_proxy_proto = out.File
	file_proxy_proto_rawDesc = nil
	file_proxy_proto_goTypes = nil
	file_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessangerProxyClient is the client API for MessangerProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessangerProxyClient interface {
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponce, error)
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (MessangerProxy_JoinChannelClient, error)
	StartChannel(ctx context.Context, opts ...grpc.CallOption) (MessangerProxy_StartChannelClient, error)
	JoinChat(ctx context.Context, opts ...grpc.CallOption) (MessangerProxy_JoinChatClient, error)
}

type messangerProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewMessangerProxyClient(cc grpc.ClientConnInterface) MessangerProxyClient {
	return &messangerProxyClient{cc}
}

func (c *messangerProxyClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponce, error) {
	out := new(GetInfoResponce)
	err := c.cc.Invoke(ctx, "/proxy.MessangerProxy/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messangerProxyClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (MessangerProxy_JoinChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessangerProxy_serviceDesc.Streams[0], "/proxy.MessangerProxy/JoinChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &messangerProxyJoinChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessangerProxy_JoinChannelClient interface {
	Recv() (*ChannelMessage, error)
	grpc.ClientStream
}

type messangerProxyJoinChannelClient struct {
	grpc.ClientStream
}

func (x *messangerProxyJoinChannelClient) Recv() (*ChannelMessage, error) {
	m := new(ChannelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messangerProxyClient) StartChannel(ctx context.Context, opts ...grpc.CallOption) (MessangerProxy_StartChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessangerProxy_serviceDesc.Streams[1], "/proxy.MessangerProxy/StartChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &messangerProxyStartChannelClient{stream}
	return x, nil
}

type MessangerProxy_StartChannelClient interface {
	Send(*StartChannelRequest) error
	CloseAndRecv() (*StartChannelResponce, error)
	grpc.ClientStream
}

type messangerProxyStartChannelClient struct {
	grpc.ClientStream
}

func (x *messangerProxyStartChannelClient) Send(m *StartChannelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messangerProxyStartChannelClient) CloseAndRecv() (*StartChannelResponce, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartChannelResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messangerProxyClient) JoinChat(ctx context.Context, opts ...grpc.CallOption) (MessangerProxy_JoinChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessangerProxy_serviceDesc.Streams[2], "/proxy.MessangerProxy/JoinChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messangerProxyJoinChatClient{stream}
	return x, nil
}

type MessangerProxy_JoinChatClient interface {
	Send(*Chat) error
	Recv() (*Chat, error)
	grpc.ClientStream
}

type messangerProxyJoinChatClient struct {
	grpc.ClientStream
}

func (x *messangerProxyJoinChatClient) Send(m *Chat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messangerProxyJoinChatClient) Recv() (*Chat, error) {
	m := new(Chat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessangerProxyServer is the server API for MessangerProxy service.
type MessangerProxyServer interface {
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponce, error)
	JoinChannel(*JoinChannelRequest, MessangerProxy_JoinChannelServer) error
	StartChannel(MessangerProxy_StartChannelServer) error
	JoinChat(MessangerProxy_JoinChatServer) error
}

// UnimplementedMessangerProxyServer can be embedded to have forward compatible implementations.
type UnimplementedMessangerProxyServer struct {
}

func (*UnimplementedMessangerProxyServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedMessangerProxyServer) JoinChannel(*JoinChannelRequest, MessangerProxy_JoinChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (*UnimplementedMessangerProxyServer) StartChannel(MessangerProxy_StartChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method StartChannel not implemented")
}
func (*UnimplementedMessangerProxyServer) JoinChat(MessangerProxy_JoinChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}

func RegisterMessangerProxyServer(s *grpc.Server, srv MessangerProxyServer) {
	s.RegisterService(&_MessangerProxy_serviceDesc, srv)
}

func _MessangerProxy_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessangerProxyServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.MessangerProxy/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessangerProxyServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessangerProxy_JoinChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinChannelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessangerProxyServer).JoinChannel(m, &messangerProxyJoinChannelServer{stream})
}

type MessangerProxy_JoinChannelServer interface {
	Send(*ChannelMessage) error
	grpc.ServerStream
}

type messangerProxyJoinChannelServer struct {
	grpc.ServerStream
}

func (x *messangerProxyJoinChannelServer) Send(m *ChannelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessangerProxy_StartChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessangerProxyServer).StartChannel(&messangerProxyStartChannelServer{stream})
}

type MessangerProxy_StartChannelServer interface {
	SendAndClose(*StartChannelResponce) error
	Recv() (*StartChannelRequest, error)
	grpc.ServerStream
}

type messangerProxyStartChannelServer struct {
	grpc.ServerStream
}

func (x *messangerProxyStartChannelServer) SendAndClose(m *StartChannelResponce) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messangerProxyStartChannelServer) Recv() (*StartChannelRequest, error) {
	m := new(StartChannelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessangerProxy_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessangerProxyServer).JoinChat(&messangerProxyJoinChatServer{stream})
}

type MessangerProxy_JoinChatServer interface {
	Send(*Chat) error
	Recv() (*Chat, error)
	grpc.ServerStream
}

type messangerProxyJoinChatServer struct {
	grpc.ServerStream
}

func (x *messangerProxyJoinChatServer) Send(m *Chat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messangerProxyJoinChatServer) Recv() (*Chat, error) {
	m := new(Chat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessangerProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.MessangerProxy",
	HandlerType: (*MessangerProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _MessangerProxy_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChannel",
			Handler:       _MessangerProxy_JoinChannel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartChannel",
			Handler:       _MessangerProxy_StartChannel_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "JoinChat",
			Handler:       _MessangerProxy_JoinChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
